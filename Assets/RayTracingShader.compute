#pragma kernel CSMain

RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float4 _DirectionalLight;

float2 _PixelOffset;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
    float3 refraction;
};

StructuredBuffer<Sphere> _Spheres;


struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    //transform origin from camera space to world space.
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    //transform point in projetction space to camera space.
    float3 projectivePoint = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    //actually, we should do this to get teh dirction vector in camera space
    float3 rayDirection = projectivePoint - float3(0, 0, 0);
    
    
    rayDirection = mul(_CameraToWorld, float4(rayDirection, 0.0f)).xyz;
    rayDirection = normalize(rayDirection);

    return CreateRay(origin, rayDirection);
}


struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
    float3 refraction;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    hit.refraction = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

//void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
//{
//    // Calculate distance along the ray where the ground plane is intersected
//    float t = -ray.origin.y / ray.direction.y;
//    if (t > 0 && t < bestHit.distance)
//    {
//        bestHit.distance = t;
//        bestHit.position = ray.origin + t * ray.direction;
//        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
//        bestHit.albedo = 0.8f;
//        bestHit.specular = 0.03f;
//        bestHit.refraction = 0.0f;
//    }
//}

void IntersectSphere(Ray ray, inout RayHit bestHit, uint sphereIndex)
{
    // Calculate distance along the ray where the sphere is intersected
    Sphere sphere = _Spheres[sphereIndex];
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < bestHit.distance)
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
        bestHit.refraction = sphere.refraction;
    }
}


RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();

    // Trace ground plane
    //IntersectGroundPlane(ray, bestHit);

    // Trace spheres
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++)
        IntersectSphere(ray, bestHit, i);
    return bestHit;
}



//calculate refraction
float3 GetRefraction(const float3 I, const float3 N, const float ior)
{
    float cosi = clamp(-1, 1, dot(I, N));
    float etai = 1, etat = ior;
    float3 n = N;
    if (cosi < 0)
    {
        cosi = -cosi;
    }
    else
    {
        //std::swap(etai, etat);
        float temp = etai;
        etai = etat;
        etat = temp;
        
        n = -N;
    }
    float eta = etai / etat;
    float k = 1 - eta * eta * (1 - cosi * cosi);
    return k < 0 ? 0 : eta * I + (eta * cosi - sqrt(k)) * n;
}

//calculate fresnel
void fresnel(const float3 I, const float3 N, const float3 ior, inout float kr)
{
    float cosi = clamp(-1, 1, dot(I, N));
    float etai = 1, etat = ior;
    if (cosi > 0)
    {
        //std::swap(etai, etat);
        float temp = etai;
        etai = etat;
        etat = temp;
    }
    // Compute sini using Snell's law
    float sint = etai / etat * sqrt(max(0.f, 1 - cosi * cosi));
    // Total internal reflection
    if (sint >= 1)
    {
        kr = 1;
    }
    else
    {
        float cost = sqrt(max(0.f, 1 - sint * sint));
        cosi = abs(cosi);
        float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost));
        float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost));
        kr = (Rs * Rs + Rp * Rp) / 2;
    }
    // As a consequence of the conservation of energy, transmittance is given by:
    // kt = 1 - kr;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {      
        if (any(hit.refraction))
        {
            float kr;
            fresnel(ray.direction, hit.normal, 1.55, kr);
            bool outside = dot(ray.direction, hit.normal) < 0;
            float3 bias = hit.normal * 0.001f;
            // compute refraction if it is not a case of total internal reflection
            if (kr > 1 || _PixelOffset.x < kr)
            {
                ray.origin = hit.position + hit.normal * 0.001f;
                ray.direction = reflect(ray.direction, hit.normal);
                ray.energy *= hit.specular;
            }
            else
            {
                float3 dir = normalize(GetRefraction(ray.direction, hit.normal, 1.55));
                ray.origin = outside ? hit.position - bias : hit.position + bias;
                ray.direction = dir;
                ray.energy *= hit.refraction;
           
            }
        }
        else
        {
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = reflect(ray.direction, hit.normal);
            ray.energy *= hit.specular;
        }
       

        // Shadow test ray
        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 1.#INF)
        {
            return float3(0.0f, 0.0f, 0.0f);
        }
        else
        {
             // Return a diffuse-shaded color
            return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
        }
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;

        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.8f;
    }
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range and apply offest
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);

    // Trace and shade the ray
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy))
            break;
    }

    Result[id.xy] = float4(result, 1);
}
